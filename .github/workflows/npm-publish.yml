name: Publish to npm.js

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Validate DATA_DIR handling
        run: |
          # Create test data directory
          mkdir -p ./test-data
          
          # Create a test script that validates DATA_DIR handling
          cat > test-data-dir.js << 'EOF'
          import fs from 'fs';
          import path from 'path';
          
          // Get DATA_DIR from environment variable
          const dataDir = process.env.DATA_DIR || path.join(process.cwd(), "data");
          console.log(`Testing DATA_DIR: ${dataDir}`);
          
          // Ensure directory exists
          if (!fs.existsSync(dataDir)) {
            console.log(`Creating directory: ${dataDir}`);
            fs.mkdirSync(dataDir, { recursive: true });
          }
          
          // Test write access
          try {
            const testFile = path.join(dataDir, '.test-file');
            fs.writeFileSync(testFile, 'test');
            console.log(`✅ Successfully wrote test file: ${testFile}`);
            fs.unlinkSync(testFile); // Clean up
            console.log(`✅ Successfully deleted test file`);
            console.log(`✅ DATA_DIR is valid and writable: ${dataDir}`);
            process.exit(0);
          } catch (error) {
            console.error(`❌ Error with DATA_DIR: ${error.message}`);
            process.exit(1);
          }
          EOF
          
          # Run the test script with DATA_DIR environment variable
          DATA_DIR=./test-data node test-data-dir.js
        
      - name: Build package and web UI
        run: npm run build:all
        
      - name: Update version (from workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Only update if versions are different
          if [ "$CURRENT_VERSION" != "${{ github.event.inputs.version }}" ]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          else
            echo "Version is already $CURRENT_VERSION, skipping version update"
          fi
        
      - name: Update version (from release)
        if: github.event_name == 'release'
        run: |
          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Only update if versions are different
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
          else
            echo "Version is already $CURRENT_VERSION, skipping version update"
          fi
        
      - name: Publish to npm.js
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GH_TOKEN }}
          
      - name: Update release with changelog
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Changelog
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            ```bash
            # Install globally
            npm install -g pytest-mcp-server
            
            # Run with custom data directory
            DATA_DIR=~/pytest-data pytest-mcp-server start
            # OR
            pytest-mcp-server start --data-dir ~/pytest-data
            ```
            
            ## Configuration with Claude, Windsurf, or Cursor
            ```json
            {
              "mcpServers": {
                "pytest-mcp-server": {
                  "command": "pytest-mcp-server",
                  "args": ["start", "--data-dir", "~/pytest-data"]
                }
              }
            }
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} 