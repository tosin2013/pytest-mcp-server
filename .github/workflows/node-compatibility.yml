name: Node.js Compatibility Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build:all
      
    - name: Test package
      run: npm test
      
    - name: Validate DATA_DIR environment variable
      timeout-minutes: 2
      run: |
        # Create test data directory
        mkdir -p ./test-data
        
        # Create a script that just checks the environment and exits
        cat > check-env.js << 'EOF'
        import fs from 'fs';
        import path from 'path';
        import { fileURLToPath } from 'url';
        
        // Get current directory in ESM
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        
        // Get DATA_DIR from environment variable
        const dataDir = process.env.DATA_DIR || path.join(process.cwd(), 'data');
        console.log(`Using data directory: ${dataDir}`);
        
        // Check if directory exists, create if not
        if (!fs.existsSync(dataDir)) {
          fs.mkdirSync(dataDir, { recursive: true });
          console.log(`Created data directory: ${dataDir}`);
        }
        
        // Print environment info
        console.log('=== Environment Configuration ===');
        console.log(`DATA_DIR: ${process.env.DATA_DIR || 'Not set (using default)'}`);
        console.log(`PORT: ${process.env.PORT || '3000 (default)'}`);
        console.log(`Current Working Directory: ${process.cwd()}`);
        
        // Exit explicitly
        process.exit(0);
        EOF
        
        # Run the check script
        DATA_DIR=./test-data node check-env.js
        
        # Verify data directory was created
        if [ -d "./test-data" ]; then
          echo "✅ Data directory was created successfully"
        else
          echo "❌ Failed to create data directory"
          exit 1
        fi
        
    - name: Validate DATA_DIR handling
      timeout-minutes: 1
      run: |
        # First test the main DATA_DIR handling
        # Create a comprehensive test script that validates DATA_DIR handling across platforms
        cat > test-data-dir.js << 'EOF'
        import fs from 'fs';
        import path from 'path';
        import os from 'os';
        
        // Print platform info for debugging
        console.log(`Platform: ${process.platform}`);
        console.log(`Node.js version: ${process.version}`);
        console.log(`Current working directory: ${process.cwd()}`);
        
        // Test 1: Direct environment variable
        console.log('\n=== Test 1: Direct environment variable ===');
        console.log(`DATA_DIR from environment: ${process.env.DATA_DIR}`);
        
        // Get DATA_DIR from environment variable or use default
        const dataDir = process.env.DATA_DIR || path.join(process.cwd(), "data");
        console.log(`Resolved DATA_DIR: ${dataDir}`);
        
        // Ensure directory exists
        if (!fs.existsSync(dataDir)) {
          console.log(`Creating directory: ${dataDir}`);
          fs.mkdirSync(dataDir, { recursive: true });
        } else {
          console.log(`Directory already exists: ${dataDir}`);
        }
        
        // Test write access
        try {
          const testFile = path.join(dataDir, '.test-file');
          fs.writeFileSync(testFile, 'test');
          console.log(`✅ Successfully wrote test file: ${testFile}`);
          fs.unlinkSync(testFile); // Clean up
          console.log(`✅ Successfully deleted test file`);
          console.log(`✅ DATA_DIR is valid and writable: ${dataDir}`);
        } catch (error) {
          console.error(`❌ Error with DATA_DIR: ${error.message}`);
          process.exit(1);
        }
        
        // Test 2: Command line argument
        console.log('\n=== Test 2: Command line argument simulation ===');
        const argDataDir = path.join(process.cwd(), 'test-arg-data');
        console.log(`Simulated --data-dir argument: ${argDataDir}`);
        
        // Ensure directory exists
        if (!fs.existsSync(argDataDir)) {
          console.log(`Creating directory: ${argDataDir}`);
          fs.mkdirSync(argDataDir, { recursive: true });
        }
        
        // Test write access
        try {
          const testFile = path.join(argDataDir, '.test-file');
          fs.writeFileSync(testFile, 'test');
          console.log(`✅ Successfully wrote test file: ${testFile}`);
          fs.unlinkSync(testFile); // Clean up
          console.log(`✅ Successfully deleted test file`);
          console.log(`✅ Command line argument data directory is valid and writable: ${argDataDir}`);
        } catch (error) {
          console.error(`❌ Error with command line argument data directory: ${error.message}`);
          process.exit(1);
        }
        
        console.log('\n✅ All tests passed successfully!');
        process.exit(0);
        EOF
        
        # Run the test script with DATA_DIR environment variable
        DATA_DIR=./test-data node test-data-dir.js
        
        # Verify both data directories were created
        if [ -d "./test-data" ] && [ -d "./test-arg-data" ]; then
          echo "✅ All data directories were created successfully"
        else
          echo "❌ Failed to create one or more data directories"
          exit 1
        fi
        
    - name: Test HTTP server DATA_DIR handling
      timeout-minutes: 1
      run: |
        # Create a test script specifically for http-server.ts
        cat > test-http-server.js << 'EOF'
        import fs from 'fs';
        import path from 'path';
        import { fileURLToPath } from 'url';
        
        // Get current directory in ESM
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        
        // Import the http-server module directly
        import './dist/http-server.js';
        
        // Check if DATA_DIR was properly set and used
        const customDataDir = './http-server-test-data';
        process.env.DATA_DIR = customDataDir;
        
        // Give a moment for the module to initialize
        setTimeout(() => {
          try {
            // Verify the directory was created
            if (fs.existsSync(customDataDir)) {
              console.log(`✅ HTTP server created data directory: ${customDataDir}`);
              
              // Test write access
              const testFile = path.join(customDataDir, '.http-server-test');
              fs.writeFileSync(testFile, 'test');
              console.log(`✅ Successfully wrote test file: ${testFile}`);
              fs.unlinkSync(testFile);
              console.log(`✅ Successfully deleted test file`);
              
              console.log('\n✅ HTTP server DATA_DIR test passed!');
              process.exit(0);
            } else {
              console.error(`❌ HTTP server did not create data directory: ${customDataDir}`);
              process.exit(1);
            }
          } catch (error) {
            console.error(`❌ Error in HTTP server test: ${error.message}`);
            process.exit(1);
          }
        }, 1000);
        EOF
        
        # Run the HTTP server test with a custom DATA_DIR
        DATA_DIR=./http-server-test-data node test-http-server.js
        
        # Verify the HTTP server data directory was created
        if [ -d "./http-server-test-data" ]; then
          echo "✅ HTTP server data directory was created successfully"
        else
          echo "❌ Failed to create HTTP server data directory"
          exit 1
        fi
