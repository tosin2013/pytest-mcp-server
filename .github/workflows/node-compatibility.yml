name: Node.js Compatibility Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Test package
      run: npm test
      
    - name: Validate DATA_DIR environment variable
      timeout-minutes: 2
      run: |
        # Create test data directory
        mkdir -p ./test-data
        
        # Create a script that just checks the environment and exits
        cat > check-env.js << 'EOF'
        import fs from 'fs';
        import path from 'path';
        import { fileURLToPath } from 'url';
        
        // Get current directory in ESM
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        
        // Get DATA_DIR from environment variable
        const dataDir = process.env.DATA_DIR || path.join(process.cwd(), 'data');
        console.log(`Using data directory: ${dataDir}`);
        
        // Check if directory exists, create if not
        if (!fs.existsSync(dataDir)) {
          fs.mkdirSync(dataDir, { recursive: true });
          console.log(`Created data directory: ${dataDir}`);
        }
        
        // Print environment info
        console.log('=== Environment Configuration ===');
        console.log(`DATA_DIR: ${process.env.DATA_DIR || 'Not set (using default)'}`);
        console.log(`PORT: ${process.env.PORT || '3000 (default)'}`);
        console.log(`Current Working Directory: ${process.cwd()}`);
        
        // Exit explicitly
        process.exit(0);
        EOF
        
        # Run the check script
        DATA_DIR=./test-data node check-env.js
        
        # Verify data directory was created
        if [ -d "./test-data" ]; then
          echo "✅ Data directory was created successfully"
        else
          echo "❌ Failed to create data directory"
          exit 1
        fi
        
    - name: Test server startup
      timeout-minutes: 3
      run: |
        # Create a script to start the server and exit after a few seconds
        cat > test-server-startup.js << 'EOF'
        import { spawn } from 'child_process';
        
        // Track whether we've already exited to avoid multiple exit attempts
        let hasExited = false;
        
        function cleanExit(code) {
          if (!hasExited) {
            hasExited = true;
            console.log(`Exiting with code ${code}`);
            process.exit(code);
          }
        }
        
        // Create a timeout to ensure we don't hang indefinitely
        const timeoutId = setTimeout(() => {
          console.error('Test timed out after 10 seconds');
          if (server && !server.killed) {
            console.log('Forcefully terminating server process...');
            server.kill('SIGKILL');
          }
          cleanExit(1);
        }, 10000);
        
        console.log('Starting server...');
        
        // Start the server process
        const server = spawn('node', ['dist/cli.js', 'start'], {
          env: { ...process.env, DATA_DIR: './test-data' },
          stdio: 'inherit'
        });
        
        // Give the server a few seconds to start
        setTimeout(() => {
          console.log('Server started successfully, shutting down...');
          clearTimeout(timeoutId); // Clear the safety timeout
          
          // Gracefully terminate the server
          if (server && !server.killed) {
            server.kill();
            
            // Ensure we exit even if the server doesn't respond to SIGTERM
            setTimeout(() => {
              if (!hasExited) {
                console.log('Forcing exit after server kill...');
                cleanExit(0);
              }
            }, 1000);
          } else {
            cleanExit(0);
          }
        }, 5000);
        
        // Handle server errors
        server.on('error', (err) => {
          console.error('Server failed to start:', err);
          clearTimeout(timeoutId);
          cleanExit(1);
        });
        
        // Handle server exit
        server.on('exit', (code) => {
          if (code !== null && code !== 0) {
            console.error(`Server exited with code ${code}`);
            clearTimeout(timeoutId);
            cleanExit(code);
          }
        });
        EOF
        
        # Run the test script
        node test-server-startup.js
