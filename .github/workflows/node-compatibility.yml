name: Node.js Compatibility Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Test package
      run: npm test
      
    - name: Validate DATA_DIR environment variable
      timeout-minutes: 2
      run: |
        # Create test data directory
        mkdir -p ./test-data
        
        # Create a script that just checks the environment and exits
        cat > check-env.js << 'EOF'
        import fs from 'fs';
        import path from 'path';
        import { fileURLToPath } from 'url';
        
        // Get current directory in ESM
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        
        // Get DATA_DIR from environment variable
        const dataDir = process.env.DATA_DIR || path.join(process.cwd(), 'data');
        console.log(`Using data directory: ${dataDir}`);
        
        // Check if directory exists, create if not
        if (!fs.existsSync(dataDir)) {
          fs.mkdirSync(dataDir, { recursive: true });
          console.log(`Created data directory: ${dataDir}`);
        }
        
        // Print environment info
        console.log('=== Environment Configuration ===');
        console.log(`DATA_DIR: ${process.env.DATA_DIR || 'Not set (using default)'}`);
        console.log(`PORT: ${process.env.PORT || '3000 (default)'}`);
        console.log(`Current Working Directory: ${process.cwd()}`);
        
        // Exit explicitly
        process.exit(0);
        EOF
        
        # Run the check script
        DATA_DIR=./test-data node check-env.js
        
        # Verify data directory was created
        if [ -d "./test-data" ]; then
          echo "✅ Data directory was created successfully"
        else
          echo "❌ Failed to create data directory"
          exit 1
        fi
        
    - name: Validate DATA_DIR handling
      timeout-minutes: 1
      run: |
        # Create a simple test script that just validates DATA_DIR without starting the server
        cat > test-data-dir.js << 'EOF'
        import fs from 'fs';
        import path from 'path';
        
        // Get DATA_DIR from environment variable or use default
        const dataDir = process.env.DATA_DIR || path.join(process.cwd(), "data");
        console.log(`Testing DATA_DIR: ${dataDir}`);
        
        // Ensure directory exists
        if (!fs.existsSync(dataDir)) {
          console.log(`Creating directory: ${dataDir}`);
          fs.mkdirSync(dataDir, { recursive: true });
        }
        
        // Test write access
        try {
          const testFile = path.join(dataDir, '.test-file');
          fs.writeFileSync(testFile, 'test');
          fs.unlinkSync(testFile); // Clean up
          console.log(`✅ DATA_DIR is valid and writable: ${dataDir}`);
          process.exit(0);
        } catch (error) {
          console.error(`❌ Error with DATA_DIR: ${error.message}`);
          process.exit(1);
        }
        EOF
        
        # Run the test script with DATA_DIR environment variable
        DATA_DIR=./test-data node test-data-dir.js
        
        # Verify the data directory was created
        if [ -d "./test-data" ]; then
          echo "✅ Data directory was created successfully"
        else
          echo "❌ Failed to create data directory"
          exit 1
        fi
