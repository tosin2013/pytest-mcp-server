name: Test pytest-mcp-server with mcp-test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'functional'
        type: choice
        options:
          - functional
          - security
          - performance
          - integration
          - all

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  test-mcp-server:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        node-version: ['18', '20']
      fail-fast: false
    
    steps:
      - name: Checkout pytest-mcp-server
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
      
      - name: Install mcp-testing-framework
        run: |
          echo "📦 Installing mcp-testing-framework..."
          pip install mcp-testing-framework
          echo "✅ mcp-testing-framework installed"
          mcp-test --version
      
      - name: Build pytest-mcp-server
        run: |
          echo "🔨 Building pytest-mcp-server..."
          npm install
          npm run build
          echo "✅ Build completed"
          ls -la dist/
      
      - name: Test basic connectivity
        run: |
          echo "🧪 Testing basic MCP server connectivity..."
          timeout 10s bash -c 'echo "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\"}" | node dist/index.js --stdio' || echo "Basic connectivity test completed"
      
      - name: Create MCP configuration
        run: |
          echo "⚙️ Creating MCP client configuration..."
          mkdir -p ~/.llm
          cat > ~/.llm/config.json << EOF
          {
            "systemPrompt": "You are an AI assistant helping with MCP server testing.",
            "llm": {
              "provider": "openai",
              "model": "gpt-4o-mini",
              "api_key": "${{ secrets.OPENAI_API_KEY || 'test-key' }}",
              "temperature": 0.7
            },
            "mcpServers": {
              "pytest-mcp-server": {
                "command": "node",
                "args": ["${{ github.workspace }}/dist/index.js", "--stdio"],
                "env": {
                  "DEBUG": "*",
                  "DATA_DIR": "${{ github.workspace }}/data"
                },
                "enabled": true,
                "exclude_tools": [],
                "requires_confirmation": []
              }
            },
            "toolsRequiresConfirmation": [],
            "testing": {}
          }
          EOF
          echo "✅ MCP configuration created"
          cat ~/.llm/config.json
      
      - name: Test MCP servers
        run: |
          echo "🚀 Testing MCP servers with mcp-test..."
          mcp-test --test-mcp-servers --test-output-format table
          echo "✅ MCP server connectivity test completed"
      
      - name: Run comprehensive test suite
        if: env.OPENAI_API_KEY != ''
        run: |
          echo "🧪 Running comprehensive test suite..."
          mcp-test --run-test-suite ${{ github.event.inputs.test_suite || 'functional' }} \
            --test-output-format json \
            --test-timeout 60 \
            --generate-test-report
          echo "✅ Test suite completed"
      
      - name: Generate test report
        if: env.OPENAI_API_KEY != ''
        run: |
          echo "📊 Generating test report..."
          mcp-test --generate-test-report --test-output-format html
          echo "✅ Test report generated"
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}-node${{ matrix.node-version }}
          path: |
            test_results.json
            test_results.html
            ~/.llm/config.json
          retention-days: 30

  generate-summary:
    needs: test-mcp-server
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
      
      - name: Generate comprehensive report
        run: |
          python3 -c "
          import json
          import os
          from pathlib import Path
          
          results = []
          for result_dir in Path('test-results').glob('test-results-*'):
              for json_file in result_dir.glob('*.json'):
                  if json_file.name.startswith('test_results'):
                      try:
                          with open(json_file) as f:
                              data = json.load(f)
                              if isinstance(data, list):
                                  results.extend(data)
                              elif isinstance(data, dict) and 'results' in data:
                                  results.extend(data['results'])
                      except Exception as e:
                          print(f'Error reading {json_file}: {e}')
          
          # Generate summary
          total = len(results)
          passed = sum(1 for r in results if r.get('status') == 'PASSED')
          failed = sum(1 for r in results if r.get('status') == 'FAILED')
          errors = sum(1 for r in results if r.get('status') == 'ERROR')
          
          summary = {
              'total_tests': total,
              'passed': passed,
              'failed': failed,
              'errors': errors,
              'success_rate': round((passed / total * 100) if total > 0 else 0, 2),
              'results': results[:10]  # Limit for display
          }
          
          with open('test_summary.json', 'w') as f:
              json.dump(summary, f, indent=2)
          
          print(f'## pytest-mcp-server Test Summary')
          print(f'- **Total Tests**: {total}')
          print(f'- **Passed**: {passed}')
          print(f'- **Failed**: {failed}')
          print(f'- **Errors**: {errors}')
          print(f'- **Success Rate**: {summary[\"success_rate\"]}%')
          print(f'- **Matrix**: Python 3.11/3.12 × Node.js 18/20')
          "
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('test_summary.json', 'utf8'));
            
            const comment = `## 🧪 pytest-mcp-server Test Results
            
            **Tested with mcp-test framework** ⚡
            
            | Metric | Value |
            |--------|-------|
            | Total Tests | ${report.total_tests} |
            | ✅ Passed | ${report.passed} |
            | ❌ Failed | ${report.failed} |
            | ⚠️ Errors | ${report.errors} |
            | Success Rate | ${report.success_rate}% |
            
            ### Test Matrix
            - **Python versions**: 3.11, 3.12
            - **Node.js versions**: 18, 20
            - **Test suite**: ${{ github.event.inputs.test_suite || 'functional' }}
            - **MCP Tools tested**: 8 pytest debugging tools
            
            ### Key Features Tested
            - 🔍 Test discovery and analysis
            - 📊 Test execution monitoring  
            - 🐛 Failure analysis and debugging
            - 📈 Performance metrics collection
            - 🔒 Security validation
            - 📝 Documentation generation
            
            ---
            *Powered by [mcp-testing-framework](https://pypi.org/project/mcp-testing-framework/)*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-mcp-server-test-summary
          path: test_summary.json
          retention-days: 90 